// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace webAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentBookReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Domain.BookLend", b =>
                {
                    b.Property<Guid>("BookLendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookRefBookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReaderRefBookReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookLendId");

                    b.HasIndex("BookRefBookId");

                    b.HasIndex("ReaderRefBookReaderId");

                    b.ToTable("BookLends");
                });

            modelBuilder.Entity("Domain.BookReader", b =>
                {
                    b.Property<Guid>("BookReaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookReaderId");

                    b.ToTable("BookReaders");
                });

            modelBuilder.Entity("Domain.EventSequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("NextSequence")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EventSequences");
                });

            modelBuilder.Entity("Domain.MetaEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InstanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerializedEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EventStore");
                });

            modelBuilder.Entity("Domain.Book", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Title500", "Title", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnName("Title")
                                .HasColumnType("nvarchar(500)")
                                .HasMaxLength(500);

                            b1.HasKey("BookId");

                            b1.ToTable("Books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.OwnsOne("Framework.ValueObjects.VersionNumber", "Version", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("Value")
                                .HasColumnName("Version")
                                .HasColumnType("bigint");

                            b1.HasKey("BookId");

                            b1.ToTable("Books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });
                });

            modelBuilder.Entity("Domain.BookLend", b =>
                {
                    b.HasOne("Domain.Book", "BookRef")
                        .WithMany("HistoryLents")
                        .HasForeignKey("BookRefBookId");

                    b.HasOne("Domain.BookReader", "ReaderRef")
                        .WithMany()
                        .HasForeignKey("ReaderRefBookReaderId");

                    b.OwnsOne("Domain.ValueObjects.DateTimeType", "DateLent", b1 =>
                        {
                            b1.Property<Guid>("BookLendId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnName("DateLent")
                                .HasColumnType("datetime2");

                            b1.HasKey("BookLendId");

                            b1.ToTable("BookLends");

                            b1.WithOwner()
                                .HasForeignKey("BookLendId");
                        });

                    b.OwnsOne("Domain.ValueObjects.DateTimeType", "DateReturned", b1 =>
                        {
                            b1.Property<Guid>("BookLendId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnName("DateReturned")
                                .HasColumnType("datetime2");

                            b1.HasKey("BookLendId");

                            b1.ToTable("BookLends");

                            b1.WithOwner()
                                .HasForeignKey("BookLendId");
                        });
                });

            modelBuilder.Entity("Domain.BookReader", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Name200", "Name", b1 =>
                        {
                            b1.Property<Guid>("BookReaderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(200)")
                                .HasMaxLength(200);

                            b1.HasKey("BookReaderId");

                            b1.ToTable("BookReaders");

                            b1.WithOwner()
                                .HasForeignKey("BookReaderId");
                        });

                    b.OwnsOne("Framework.ValueObjects.VersionNumber", "Version", b1 =>
                        {
                            b1.Property<Guid>("BookReaderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("Value")
                                .HasColumnName("Version")
                                .HasColumnType("bigint");

                            b1.HasKey("BookReaderId");

                            b1.ToTable("BookReaders");

                            b1.WithOwner()
                                .HasForeignKey("BookReaderId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
